{"version":3,"file":"index.mjs","sources":["../http-server/lib/validate.js","../http-server/lib/main.js","../disposable-http-server/lib/main.js","../disposable-http-server/lib/validate.js","../disposable-http-server/lib/opts.js","../a19f2876505e573351f53f3cb75fcc","../disposable-http-server/lib/connections_store.js","../simple-http-server/lib/validate.js","../simple-http-server/lib/404.js","../simple-http-server/lib/request_listener.js","../simple-http-server/lib/main.js","../simple-http-server/lib/opts.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {(Error|null)} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\topts.port = options.port;\n\t\tif ( !isNonNegativeInteger( opts.port ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'port', opts.port ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\topts.maxport = options.maxport;\n\t\tif ( !isNonNegativeInteger( opts.maxport ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'maxport', opts.maxport ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\topts.hostname = options.hostname;\n\t\tif ( !isString( opts.hostname ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'hostname', opts.hostname ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\topts.address = options.address;\n\t\tif ( !isString( opts.address ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'address', opts.address ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar http = require( 'http' );\nvar logger = require( 'debug' );\nimport isFunction from '@stdlib/assert/is-function';\nimport format from '@stdlib/string/format';\nimport validate from './validate.js';\nimport DEFAULTS from './defaults.json';\n\n\n// VARIABLES //\n\nvar debug = logger( './../../http-server' );\n\n\n// MAIN //\n\n/**\n* Returns a function which creates an HTTP server.\n*\n* @param {Options} [options] - server options\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"127.0.0.1\"] - server address\n* @param {Callback} [requestListener] - callback invoked upon receiving an HTTP request\n* @throws {TypeError} `requestListener` must be a function\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which creates an HTTP server\n*\n* @example\n* var createServer = httpServer();\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* var createServer = httpServer( opts );\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* function onRequest( request, response ) {\n*     console.log( request.url );\n*     response.end( 'OK' );\n* }\n* var createServer = httpServer( opts, onRequest );\n*/\nfunction httpServer() {\n\tvar requestListener;\n\tvar hostname;\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar port;\n\tvar max;\n\tvar err;\n\n\tnargs = arguments.length;\n\topts = {};\n\tif ( nargs === 1 ) {\n\t\tif ( isFunction( arguments[0] ) ) {\n\t\t\trequestListener = arguments[ 0 ];\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\terr = validate( opts, options );\n\t\t}\n\t}\n\telse if ( nargs > 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\trequestListener = arguments[ 1 ];\n\t\tif ( !isFunction( requestListener ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Request listener must be a function. Value: `%s`.', requestListener ) );\n\t\t}\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( opts.port === void 0 ) {\n\t\tport = DEFAULTS.port;\n\t} else {\n\t\tport = opts.port;\n\t}\n\tdebug( 'Server port: %d', port );\n\n\tif ( opts.maxport === void 0 ) {\n\t\tmax = port;\n\t} else {\n\t\tmax = opts.maxport;\n\t}\n\tdebug( 'Max server port: %d', max );\n\n\tif ( opts.hostname ) {\n\t\thostname = opts.hostname;\n\t}\n\telse if ( opts.address ) {\n\t\thostname = opts.address;\n\t}\n\telse {\n\t\thostname = DEFAULTS.address;\n\t}\n\tdebug( 'Server hostname: %s', hostname );\n\n\treturn createServer;\n\n\t/**\n\t* Creates an HTTP server.\n\t*\n\t* @private\n\t* @param {Callback} done - function to invoke after creating a server\n\t* @throws {TypeError} must provide a function\n\t*\n\t* @example\n\t* function done( error, server ) {\n\t*     if ( error ) {\n\t*         throw error;\n\t*     }\n\t*     console.log( 'Success!' );\n\t*     server.close();\n\t* }\n\t* createServer( done );\n\t*/\n\tfunction createServer( done ) {\n\t\tvar server;\n\t\tif ( !isFunction( done ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t\t}\n\t\tif ( requestListener ) {\n\t\t\tserver = http.createServer( requestListener );\n\t\t} else {\n\t\t\tserver = http.createServer();\n\t\t}\n\t\tserver.on( 'error', errorListener );\n\t\tserver.once( 'listening', onListen );\n\n\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\tserver.listen( port, hostname );\n\n\t\t/**\n\t\t* Server error event handler.\n\t\t*\n\t\t* @private\n\t\t* @param {Error} error - server error\n\t\t* @throws {Error} server error\n\t\t*/\n\t\tfunction errorListener( error ) {\n\t\t\tif ( error.code === 'EADDRINUSE' ) {\n\t\t\t\tdebug( 'Server address already in use: %s:%d.', hostname, port );\n\t\t\t\tport += 1;\n\t\t\t\tif ( port <= max ) {\n\t\t\t\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\t\t\t\tserver.listen( port, hostname );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t* Callback invoked once a server is listening and ready to handle requests.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction onListen() {\n\t\t\tvar addr = server.address();\n\t\t\tdebug( 'HTTP server initialized. Server is listening for requests on %s:%d.', addr.address, addr.port );\n\t\t\tdone( null, server );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default httpServer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar path = require( 'path' );\nvar logger = require( 'debug' );\nimport objectKeys from '@stdlib/utils/keys';\nimport createServer from './../../http-server';\nimport { sync as readFileSync } from '@stdlib/fs/read-file';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isFunction from '@stdlib/assert/is-function';\nimport openURL from '@stdlib/utils/open-url';\nimport noop from '@stdlib/utils/noop';\nimport Buffer from '@stdlib/buffer/ctor';\nimport string2buffer from '@stdlib/buffer/from-string';\nimport nextTick from '@stdlib/utils/next-tick';\nimport format from '@stdlib/string/format';\nimport validate from './validate.js';\nimport serverOpts from './opts.js';\nimport createStore from './connections_store.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'disposable-http-server' );\n\n\n// MAIN //\n\n/**\n* Creates a disposable HTTP server.\n*\n* @param {Options} options - server options\n* @param {(Buffer|string)} [options.html] - HTML content to serve\n* @param {(Buffer|string)} [options.javascript] - JavaScript to serve\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"0.0.0.0\"] - server address\n* @param {boolean} [options.open=false] - boolean indicating whether to launch a web browser\n* @param {Callback} [clbk] - callback to invoke upon creating a server\n* @throws {TypeError} must provide valid options\n* @throws {Error} error encountered when starting server\n*\n* @example\n* var opts = {\n*     'html': '<h1>Beep</h1>'\n* };\n*\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\nfunction httpServer( options ) {\n\tvar connections;\n\tvar isClosing;\n\tvar server;\n\tvar sopts;\n\tvar fpath;\n\tvar clbk;\n\tvar boot;\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t} else {\n\t\tclbk = noop;\n\t}\n\terr = validate( opts, options );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\t// If provided HTML and/or JavaScript as `strings`, convert to `buffers`...\n\tif ( opts.html && isString( opts.html ) ) {\n\t\topts.html = string2buffer( opts.html );\n\t}\n\tif ( opts.javascript && isString( opts.javascript ) ) {\n\t\topts.javascript = string2buffer( opts.javascript );\n\t}\n\t// Extract server options:\n\tsopts = serverOpts( options );\n\n\tdebug( 'Serving provided content.' );\n\tif ( !opts.html ) {\n\t\tdebug( 'No HTML content provided.' );\n\t\tdebug( 'Loading a boilerplate HTML page...' );\n\t\tfpath = path.resolve( __dirname, '../static/index.html' );\n\t\topts.html = readFileSync( fpath );\n\t}\n\t// Create a function to boot a server...\n\tboot = createServer( sopts, requestListener );\n\n\tdebug( 'Starting server...' );\n\tboot( onServer );\n\n\t// Initialize a connections store:\n\tconnections = createStore();\n\n\t/**\n\t* Callback invoked upon creating a server.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {Server} _server - server instance\n\t* @throws {Error} error encountered when starting server\n\t*/\n\tfunction onServer( error, _server ) {\n\t\tvar addr;\n\t\tif ( error ) {\n\t\t\tthrow error;\n\t\t}\n\t\tdebug( 'Server started.' );\n\t\tserver = _server;\n\t\tserver.on( 'connection', onConnection );\n\t\tserver.once( 'close', onClose );\n\t\tif ( opts.open ) {\n\t\t\taddr = server.address();\n\t\t\topenURL( 'http://'+addr.address+':'+addr.port );\n\t\t}\n\t\tclbk( null, server );\n\t}\n\n\t/**\n\t* Callback invoked upon receiving a socket connection.\n\t*\n\t* @private\n\t* @param {Socket} socket - socket connection\n\t*/\n\tfunction onConnection( socket ) {\n\t\tvar key = socket.remoteAddress + ':' + socket.remotePort;\n\n\t\tdebug( 'Received a socket connection: %s.', key );\n\t\tconnections[ key ] = socket;\n\t\tsocket.on( 'close', onClose );\n\n\t\t/**\n\t\t* Callback invoked once a socket connection closes.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction onClose() {\n\t\t\tdebug( 'Socket connection closed: %s.', key );\n\t\t\tdelete connections[ key ];\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked upon receiving an HTTP request for provided content.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t* @returns {void}\n\t*/\n\tfunction requestListener( request, response ) {\n\t\tdebug( 'Received a request for %s', request.url );\n\n\t\tif ( isClosing ) {\n\t\t\treturn unavailable( request, response );\n\t\t}\n\t\tif ( request.url === '/bundle.js' ) {\n\t\t\tnextTick( onTick( sendJavaScript ) );\n\t\t\treturn response.once( 'finish', onFinish );\n\t\t}\n\t\tif ( request.url !== '/' && request.url !== '/index.html' ) {\n\t\t\treturn notFound( request, response );\n\t\t}\n\t\tnextTick( onTick( sendHTML ) );\n\t\tif ( !opts.javascript ) {\n\t\t\tresponse.once( 'finish', onFinish );\n\t\t}\n\n\t\t/**\n\t\t* Returns a callback to return a response on the next tick. Note that this is a workaround for a race condition bug in Node v0.10 (see [nodejs/node#1309][1]).\n\t\t*\n\t\t* [1]: https://github.com/nodejs/node/issues/1309\n\t\t*\n\t\t* @private\n\t\t* @param {Function} fcn - response function\n\t\t* @returns {Callback} callback to invoke on next tick\n\t\t*/\n\t\tfunction onTick( fcn ) {\n\t\t\treturn next;\n\n\t\t\t/**\n\t\t\t* Callback to return on a response.\n\t\t\t*\n\t\t\t* @private\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\tfcn( request, response );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Sends a 404 response.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction notFound( request, response ) {\n\t\tdebug( 'Sending 404 response...' );\n\t\tresponse.statusCode = 404;\n\t\tresponse.end();\n\t}\n\n\t/**\n\t* Sends a 503 response.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction unavailable( request, response ) {\n\t\tdebug( 'Sending 503 response...' );\n\t\tresponse.statusCode = 503;\n\t\tresponse.end();\n\t}\n\n\t/**\n\t* Sends HTML content in response to a client request.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction sendHTML( request, response ) {\n\t\tdebug( 'Sending HTML...' );\n\t\tresponse.statusCode = 200;\n\t\tresponse.setHeader( 'Content-Type', 'text/html' );\n\n\t\t// TODO: we have to convert to a `string` because Node v0.10 requires a `string`. Subsequent versions support providing a `Buffer` object. Ideally, we would sniff `Buffer` support and only convert to a `string` if necessary.\n\t\tresponse.setHeader( 'Content-Length', Buffer.byteLength( opts.html.toString() ) );\n\t\tresponse.end( opts.html );\n\t}\n\n\t/**\n\t* Sends JavaScript content in response to a client request.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction sendJavaScript( request, response ) {\n\t\tdebug( 'Sending JavaScript...' );\n\t\tresponse.statusCode = 200;\n\t\tresponse.setHeader( 'Content-Type', 'text/javascript' );\n\n\t\t// TODO: we have to convert to a `string` because Node v0.10 requires a `string`. Subsequent versions support providing a `Buffer` object. Ideally, we would sniff `Buffer` support and only convert to a `string` if necessary.\n\t\tresponse.setHeader( 'Content-Length', Buffer.byteLength( opts.javascript.toString() ) );\n\t\tresponse.end( opts.javascript );\n\t}\n\n\t/**\n\t* Callback invoked once the server should close.\n\t*\n\t* @private\n\t*/\n\tfunction onFinish() {\n\t\tdebug( 'Finished serving content.' );\n\t\tisClosing = true;\n\n\t\tdebug( 'Closing the server...' );\n\t\tserver.close();\n\n\t\tsetTimeout( destroyConnections, 5000 );\n\t}\n\n\t/**\n\t* Destroys all connections.\n\t*\n\t* @private\n\t*/\n\tfunction destroyConnections() {\n\t\tvar keys;\n\t\tvar i;\n\n\t\tdebug( 'Destroying all connections...' );\n\t\tkeys = objectKeys( connections );\n\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\tdebug( 'Destroying connection %s...', keys[i] );\n\t\t\tconnections[ keys[i] ].destroy();\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked once a server closes.\n\t*\n\t* @private\n\t*/\n\tfunction onClose() {\n\t\tdebug( 'Server closed.' );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default httpServer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isBuffer from '@stdlib/assert/is-buffer';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {(Buffer|string)} [options.html] - HTML content to serve\n* @param {(Buffer|string)} [options.javascript] - JavaScript script to serve\n* @param {boolean} [options.open] - indicates whether to launch a web browser\n* @returns {Error|null} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1',\n*     'open': false\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'html' ) ) {\n\t\topts.html = options.html;\n\t\tif ( !isBuffer( opts.html ) && !isString( opts.html ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be either a Buffer or a string. Option: `%s`.', 'html', opts.html ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'javascript' ) ) {\n\t\topts.javascript = options.javascript;\n\t\tif ( !isBuffer( opts.javascript ) && !isString( opts.javascript ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be either a Buffer or a string. Option: `%s`.', 'javascript', opts.javascript ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'open' ) ) {\n\t\topts.open = options.open;\n\t\tif ( !isBoolean( opts.open ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'open', opts.open ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert/has-own-property';\n\n\n// MAIN //\n\n/**\n* Extracts HTTP server options from input function options.\n*\n* @private\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {Options} server options\n*\n* @example\n* var options = {\n*     'html': '<h1>beep</h1>',\n*     'open': true,\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var out = opts( options );\n* // returns {'port': 7331, 'address': '127.0.0.1'}\n*/\nfunction opts( options ) {\n\tvar out = {};\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\tout.port = options.port;\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\tout.maxport = options.maxport;\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\tout.hostname = options.hostname;\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\tout.address = options.address;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default opts;\n","export default '/home/runner/work/net/net/disposable-http-server/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a new connections store.\n*\n* @private\n* @returns {Object} store\n*/\nfunction create() {\n\treturn {};\n}\n\n\n// EXPORTS //\n\nexport default create;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - directory from which to serve files\n* @param {boolean} [options.open] - indicates whether to launch a web browser\n* @returns {(Error|null)} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1',\n*     'open': false\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'open' ) ) {\n\t\topts.open = options.open;\n\t\tif ( !isBoolean( opts.open ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'open', opts.open ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport string2buffer from '@stdlib/buffer/from-string';\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server:404' );\nvar message = string2buffer( 'File not found' );\n\n\n// MAIN //\n\n/**\n* Returns a `404` response.\n*\n* @private\n* @param {IncomingMessage} request - HTTP request object\n* @param {ServerResponse} response - HTTP response object\n*/\nfunction notFound( request, response ) {\n\tdebug( 'Sending 404 response...' );\n\tresponse.statusCode = 404;\n\tresponse.setHeader( 'Content-Type', 'text/plain' );\n\tresponse.setHeader( 'Content-Length', message.length );\n\tresponse.end( message );\n}\n\n\n// EXPORTS //\n\nexport default notFound;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar logger = require( 'debug' );\nimport readDir from '@stdlib/fs/read-dir';\nimport notFound from './404.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server:request-listener' );\n\n\n// MAIN //\n\n/**\n* Returns a request listener for serving a directory.\n*\n* @private\n* @param {Options} opts - server options\n* @param {string} opts.dir - directory to serve\n* @returns {Function} request listener\n*/\nfunction requestListener( opts ) {\n\treturn onRequest;\n\n\t/**\n\t* Callback invoked upon receiving an HTTP request when serving a directory.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction onRequest( request, response ) {\n\t\tvar path;\n\n\t\tdebug( 'Received a request for %s', request.url );\n\n\t\t// Resolve the directory path, making sure to guard against attempts to access parent directories...\n\t\tpath = request.url.substring( 1 ); // remove leading `/`\n\t\tpath = resolve( opts.dir, path );\n\t\tif ( path.substring( opts.dir.length ) === '' ) {\n\t\t\tpath = opts.dir;\n\t\t}\n\t\tdebug( 'Request resolved to path %s', path );\n\t\tdebug( 'Reading directory' );\n\t\treadDir( path, onDir );\n\n\t\t/**\n\t\t* Callback invoked after reading a directory's contents.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {StringArray} contents - directory contents\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onDir( error, contents ) { // eslint-disable-line no-unused-vars\n\t\t\tif ( error ) {\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'ENOENT' ||\n\t\t\t\t\terror.code === 'ENOTDIR'\n\t\t\t\t) {\n\t\t\t\t\t// Return a `404` response...\n\t\t\t\t\treturn notFound( response );\n\t\t\t\t}\n\t\t\t\t// TODO\n\t\t\t}\n\t\t\t// TODO\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default requestListener;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar path = require( 'path' );\nvar logger = require( 'debug' );\nimport cwd from '@stdlib/process/cwd';\nimport createServer from './../../http-server';\nimport isFunction from '@stdlib/assert/is-function';\nimport openURL from '@stdlib/utils/open-url';\nimport format from '@stdlib/string/format';\nimport noop from '@stdlib/utils/noop';\nimport validate from './validate.js';\nimport serverOpts from './opts.js';\nimport requestListener from './request_listener.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server' );\n\n\n// MAIN //\n\n/**\n* Creates a simple HTTP server. The implementation takes inspiration from Python's [SimpleHTTPServer][python-simplehttpserver].\n*\n* [python-simplehttpserver]: https://docs.python.org/2/library/simplehttpserver.html\n*\n* @param {Options} [options] - server options\n* @param {string} [options.dir] - directory from which to serve files\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"0.0.0.0\"] - server address\n* @param {boolean} [options.open=false] - indicates whether to launch a web browser\n* @param {Callback} [clbk] - callback to invoke upon creating a server\n* @throws {TypeError} must provide valid options\n* @throws {Error} error encountered when starting server\n*\n* @example\n* var opts = {\n*     'dir': './',\n*     'port': 7331,\n*     'hostname': 'localhost',\n*     'open': false\n* };\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\nfunction httpServer() {\n\tvar options;\n\tvar server;\n\tvar sopts;\n\tvar clbk;\n\tvar boot;\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length === 1 ) {\n\t\tif ( isFunction( arguments[0] ) ) {\n\t\t\tclbk = arguments[ 0 ];\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\terr = validate( opts, options );\n\t\t}\n\t} else if ( arguments.length > 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( clbk === void 0 ) {\n\t\tclbk = noop;\n\t}\n\tif ( opts.dir ) {\n\t\topts.dir = path.resolve( cwd(), opts.dir );\n\t}\n\tdebug( 'Serving directory: %s', opts.dir );\n\n\t// Extract server options...\n\tif ( options ) {\n\t\tsopts = serverOpts( options );\n\t} else {\n\t\tsopts = {};\n\t}\n\t// Create a function to boot a server...\n\tboot = createServer( sopts, requestListener( opts ) );\n\n\tdebug( 'Starting server...' );\n\tboot( onServer );\n\n\t/**\n\t* Callback invoked upon creating a server.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {Server} _server - server instance\n\t* @throws {Error} error encountered when starting server\n\t*/\n\tfunction onServer( error, _server ) {\n\t\tvar addr;\n\t\tif ( error ) {\n\t\t\tthrow error;\n\t\t}\n\t\tdebug( 'Server started.' );\n\t\tserver = _server;\n\t\tserver.once( 'close', onClose );\n\t\tif ( opts.open ) {\n\t\t\taddr = server.address();\n\t\t\topenURL( 'http://'+addr.address+':'+addr.port );\n\t\t}\n\t\tclbk( null, server );\n\t}\n\n\t/**\n\t* Callback invoked once a server closes.\n\t*\n\t* @private\n\t*/\n\tfunction onClose() {\n\t\tdebug( 'Server closed.' );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default httpServer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert/has-own-property';\n\n\n// MAIN //\n\n/**\n* Extracts HTTP server options from input function options.\n*\n* @private\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {Options} server options\n*\n* @example\n* var options = {\n*     'open': true,\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var out = opts( options );\n* // returns {'port': 7331, 'address': '127.0.0.1'}\n*/\nfunction opts( options ) {\n\tvar out = {};\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\tout.port = options.port;\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\tout.maxport = options.maxport;\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\tout.hostname = options.hostname;\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\tout.address = options.address;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default opts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace net\n*/\nvar net = {};\n\n/**\n* @name tempHttpServer\n* @memberof net\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/net/disposable-http-server}\n*/\nimport tempHttpServer from './../disposable-http-server';\nsetReadOnly( net, 'tempHttpServer', tempHttpServer );\n\n/**\n* @name httpServer\n* @memberof net\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/net/http-server}\n*/\nimport httpServer from './../http-server';\nsetReadOnly( net, 'httpServer', httpServer );\n\n/**\n* @name simpleHttpServer\n* @memberof net\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/net/simple-http-server}\n*/\nimport simpleHttpServer from './../simple-http-server';\nsetReadOnly( net, 'simpleHttpServer', simpleHttpServer );\n\n\n// EXPORTS //\n\nexport default net;\n"],"names":["validate","opts","options","isObject","hasOwnProp","port","isNonNegativeInteger","TypeError","format","maxport","hostname","isString","address","http","debug","require$$1","httpServer","requestListener","nargs","max","err","arguments","length","isFunction","DEFAULTS","done","server","createServer","on","error","code","listen","once","addr","path","require$$0","connections","isClosing","sopts","fpath","clbk","boot","noop","html","isBuffer","javascript","open","isBoolean","onConnection","socket","key","remoteAddress","remotePort","sendHTML","request","response","statusCode","setHeader","Buffer","byteLength","toString","end","sendJavaScript","onFinish","close","setTimeout","destroyConnections","keys","i","objectKeys","destroy","onClose","string2buffer","out","serverOpts","resolve","readFileSync","url","unavailable","nextTick","onTick","notFound","fcn","_server","openURL","dir","message","substring","readDir","contents","cwd","net","setReadOnly","tempHttpServer","simpleHttpServer"],"mappings":"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"}