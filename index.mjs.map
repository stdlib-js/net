{"version":3,"file":"index.mjs","sources":["../http-server/lib/validate.js","../http-server/lib/main.js","../http-server/lib/index.js","../disposable-http-server/lib/validate.js","../disposable-http-server/lib/opts.js","../disposable-http-server/lib/connections_store.js","../18a479bd249b1ffc3e6a012cf63900","../disposable-http-server/lib/main.js","../disposable-http-server/lib/index.js","../simple-http-server/lib/validate.js","../simple-http-server/lib/opts.js","../simple-http-server/lib/404.js","../simple-http-server/lib/request_listener.js","../simple-http-server/lib/main.js","../simple-http-server/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {(Error|null)} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\topts.port = options.port;\n\t\tif ( !isNonNegativeInteger( opts.port ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'port', opts.port ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\topts.maxport = options.maxport;\n\t\tif ( !isNonNegativeInteger( opts.maxport ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'maxport', opts.maxport ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\topts.hostname = options.hostname;\n\t\tif ( !isString( opts.hostname ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'hostname', opts.hostname ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\topts.address = options.address;\n\t\tif ( !isString( opts.address ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'address', opts.address ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar http = require( 'http' );\nvar logger = require( 'debug' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar DEFAULTS = require( './defaults.json' );\n\n\n// VARIABLES //\n\nvar debug = logger( './../../http-server');\n\n\n// MAIN //\n\n/**\n* Returns a function which creates an HTTP server.\n*\n* @param {Options} [options] - server options\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"127.0.0.1\"] - server address\n* @param {Callback} [requestListener] - callback invoked upon receiving an HTTP request\n* @throws {TypeError} `requestListener` must be a function\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which creates an HTTP server\n*\n* @example\n* var createServer = httpServer();\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* var createServer = httpServer( opts );\n*\n* @example\n* var opts = {\n*     'port': 7331,\n*     'address': '0.0.0.0'\n* };\n* function onRequest( request, response ) {\n*     console.log( request.url );\n*     response.end( 'OK' );\n* }\n* var createServer = httpServer( opts, onRequest );\n*/\nfunction httpServer() {\n\tvar requestListener;\n\tvar hostname;\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar port;\n\tvar max;\n\tvar err;\n\n\tnargs = arguments.length;\n\topts = {};\n\tif ( nargs === 1 ) {\n\t\tif ( isFunction( arguments[0] )) {\n\t\t\trequestListener = arguments[ 0 ];\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\terr = validate( opts, options );\n\t\t}\n\t}\n\telse if ( nargs > 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\trequestListener = arguments[ 1 ];\n\t\tif ( !isFunction( requestListener ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Request listener must be a function. Value: `%s`.', requestListener ) );\n\t\t}\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( opts.port === void 0 ) {\n\t\tport = DEFAULTS.port;\n\t} else {\n\t\tport = opts.port;\n\t}\n\tdebug( 'Server port: %d', port );\n\n\tif ( opts.maxport === void 0 ) {\n\t\tmax = port;\n\t} else {\n\t\tmax = opts.maxport;\n\t}\n\tdebug( 'Max server port: %d', max );\n\n\tif ( opts.hostname ) {\n\t\thostname = opts.hostname;\n\t}\n\telse if ( opts.address ) {\n\t\thostname = opts.address;\n\t}\n\telse {\n\t\thostname = DEFAULTS.address;\n\t}\n\tdebug( 'Server hostname: %s', hostname );\n\n\treturn createServer;\n\n\t/**\n\t* Creates an HTTP server.\n\t*\n\t* @private\n\t* @param {Callback} done - function to invoke after creating a server\n\t* @throws {TypeError} must provide a function\n\t*\n\t* @example\n\t* function done( error, server ) {\n\t*     if ( error ) {\n\t*         throw error;\n\t*     }\n\t*     console.log( 'Success!' );\n\t*     server.close();\n\t* }\n\t* createServer( done );\n\t*/\n\tfunction createServer( done ) {\n\t\tvar server;\n\t\tif ( !isFunction( done ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t\t}\n\t\tif ( requestListener ) {\n\t\t\tserver = http.createServer( requestListener );\n\t\t} else {\n\t\t\tserver = http.createServer();\n\t\t}\n\t\tserver.on( 'error', errorListener );\n\t\tserver.once( 'listening', onListen );\n\n\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\tserver.listen( port, hostname );\n\n\t\t/**\n\t\t* Server error event handler.\n\t\t*\n\t\t* @private\n\t\t* @param {Error} error - server error\n\t\t* @throws {Error} server error\n\t\t*/\n\t\tfunction errorListener( error ) {\n\t\t\tif ( error.code === 'EADDRINUSE' ) {\n\t\t\t\tdebug( 'Server address already in use: %s:%d.', hostname, port );\n\t\t\t\tport += 1;\n\t\t\t\tif ( port <= max ) {\n\t\t\t\t\tdebug( 'Attempting to listen on %s:%d.', hostname, port );\n\t\t\t\t\tserver.listen( port, hostname );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t* Callback invoked once a server is listening and ready to handle requests.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction onListen() {\n\t\t\tvar addr = server.address();\n\t\t\tdebug( 'HTTP server initialized. Server is listening for requests on %s:%d.', addr.address, addr.port );\n\t\t\tdone( null, server );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an HTTP server.\n*\n* @module @stdlib/net/http-server\n*\n* @example\n* var httpServer = require( '@stdlib/net/http-server' );\n*\n* var opts = {\n*     'port': 7331,\n*    'address': '0.0.0.0'\n* };\n* function done( error, server ) {\n*    if ( error ) {\n*        throw error;\n*    }\n*    console.log( 'Success!' );\n*    server.close();\n* }\n* var createServer = httpServer( opts );\n* createServer( done );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {(Buffer|string)} [options.html] - HTML content to serve\n* @param {(Buffer|string)} [options.javascript] - JavaScript script to serve\n* @param {boolean} [options.open] - indicates whether to launch a web browser\n* @returns {Error|null} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1',\n*     'open': false\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'html' ) ) {\n\t\topts.html = options.html;\n\t\tif ( !isBuffer( opts.html ) && !isString( opts.html ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be either a Buffer or a string. Option: `%s`.', 'html', opts.html ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'javascript' ) ) {\n\t\topts.javascript = options.javascript;\n\t\tif ( !isBuffer( opts.javascript ) && !isString( opts.javascript ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be either a Buffer or a string. Option: `%s`.', 'javascript', opts.javascript ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'open' ) ) {\n\t\topts.open = options.open;\n\t\tif ( !isBoolean( opts.open ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'open', opts.open ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\n\n\n// MAIN //\n\n/**\n* Extracts HTTP server options from input function options.\n*\n* @private\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {Options} server options\n*\n* @example\n* var options = {\n*     'html': '<h1>beep</h1>',\n*     'open': true,\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var out = opts( options );\n* // returns {'port': 7331, 'address': '127.0.0.1'}\n*/\nfunction opts( options ) {\n\tvar out = {};\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\tout.port = options.port;\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\tout.maxport = options.maxport;\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\tout.hostname = options.hostname;\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\tout.address = options.address;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = opts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a new connections store.\n*\n* @private\n* @returns {Object} store\n*/\nfunction create() {\n\treturn {};\n}\n\n\n// EXPORTS //\n\nmodule.exports = create;\n","export default '/home/runner/work/net/net/disposable-http-server/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar path = require( 'path' );\nvar logger = require( 'debug' );\nvar objectKeys = require( '@stdlib/utils/keys' );\nvar createServer = require( './../../http-server' );\nvar readFileSync = require( '@stdlib/fs/read-file' ).sync;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar openURL = require( '@stdlib/utils/open-url' );\nvar noop = require( '@stdlib/utils/noop' );\nvar Buffer = require( '@stdlib/buffer/ctor' );\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar serverOpts = require( './opts.js' );\nvar createStore = require( './connections_store.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'disposable-http-server' );\n\n\n// MAIN //\n\n/**\n* Creates a disposable HTTP server.\n*\n* @param {Options} options - server options\n* @param {(Buffer|string)} [options.html] - HTML content to serve\n* @param {(Buffer|string)} [options.javascript] - JavaScript to serve\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"0.0.0.0\"] - server address\n* @param {boolean} [options.open=false] - boolean indicating whether to launch a web browser\n* @param {Callback} [clbk] - callback to invoke upon creating a server\n* @throws {TypeError} must provide valid options\n* @throws {Error} error encountered when starting server\n*\n* @example\n* var opts = {\n*     'html': '<h1>Beep</h1>'\n* };\n*\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\nfunction httpServer( options ) {\n\tvar connections;\n\tvar isClosing;\n\tvar server;\n\tvar sopts;\n\tvar fpath;\n\tvar clbk;\n\tvar boot;\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t} else {\n\t\tclbk = noop;\n\t}\n\terr = validate( opts, options );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\t// If provided HTML and/or JavaScript as `strings`, convert to `buffers`...\n\tif ( opts.html && isString( opts.html ) ) {\n\t\topts.html = string2buffer( opts.html );\n\t}\n\tif ( opts.javascript && isString( opts.javascript ) ) {\n\t\topts.javascript = string2buffer( opts.javascript );\n\t}\n\t// Extract server options:\n\tsopts = serverOpts( options );\n\n\tdebug( 'Serving provided content.' );\n\tif ( !opts.html ) {\n\t\tdebug( 'No HTML content provided.' );\n\t\tdebug( 'Loading a boilerplate HTML page...' );\n\t\tfpath = path.resolve( __dirname, '../static/index.html' );\n\t\topts.html = readFileSync( fpath );\n\t}\n\t// Create a function to boot a server...\n\tboot = createServer( sopts, requestListener );\n\n\tdebug( 'Starting server...' );\n\tboot( onServer );\n\n\t// Initialize a connections store:\n\tconnections = createStore();\n\n\t/**\n\t* Callback invoked upon creating a server.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {Server} _server - server instance\n\t* @throws {Error} error encountered when starting server\n\t*/\n\tfunction onServer( error, _server ) {\n\t\tvar addr;\n\t\tif ( error ) {\n\t\t\tthrow error;\n\t\t}\n\t\tdebug( 'Server started.' );\n\t\tserver = _server;\n\t\tserver.on( 'connection', onConnection );\n\t\tserver.once( 'close', onClose );\n\t\tif ( opts.open ) {\n\t\t\taddr = server.address();\n\t\t\topenURL( 'http://'+addr.address+':'+addr.port );\n\t\t}\n\t\tclbk( null, server );\n\t}\n\n\t/**\n\t* Callback invoked upon receiving a socket connection.\n\t*\n\t* @private\n\t* @param {Socket} socket - socket connection\n\t*/\n\tfunction onConnection( socket ) {\n\t\tvar key = socket.remoteAddress + ':' + socket.remotePort;\n\n\t\tdebug( 'Received a socket connection: %s.', key );\n\t\tconnections[ key ] = socket;\n\t\tsocket.on( 'close', onClose );\n\n\t\t/**\n\t\t* Callback invoked once a socket connection closes.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction onClose() {\n\t\t\tdebug( 'Socket connection closed: %s.', key );\n\t\t\tdelete connections[ key ];\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked upon receiving an HTTP request for provided content.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t* @returns {void}\n\t*/\n\tfunction requestListener( request, response ) {\n\t\tdebug( 'Received a request for %s', request.url );\n\n\t\tif ( isClosing ) {\n\t\t\treturn unavailable( request, response );\n\t\t}\n\t\tif ( request.url === '/bundle.js' ) {\n\t\t\tnextTick( onTick( sendJavaScript ) );\n\t\t\treturn response.once( 'finish', onFinish );\n\t\t}\n\t\tif ( request.url !== '/' && request.url !== '/index.html' ) {\n\t\t\treturn notFound( request, response );\n\t\t}\n\t\tnextTick( onTick( sendHTML ) );\n\t\tif ( !opts.javascript ) {\n\t\t\tresponse.once( 'finish', onFinish );\n\t\t}\n\n\t\t/**\n\t\t* Returns a callback to return a response on the next tick. Note that this is a workaround for a race condition bug in Node v0.10 (see [nodejs/node#1309][1]).\n\t\t*\n\t\t* [1]: https://github.com/nodejs/node/issues/1309\n\t\t*\n\t\t* @private\n\t\t* @param {Function} fcn - response function\n\t\t* @returns {Callback} callback to invoke on next tick\n\t\t*/\n\t\tfunction onTick( fcn ) {\n\t\t\treturn next;\n\n\t\t\t/**\n\t\t\t* Callback to return on a response.\n\t\t\t*\n\t\t\t* @private\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\tfcn( request, response );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Sends a 404 response.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction notFound( request, response ) {\n\t\tdebug( 'Sending 404 response...' );\n\t\tresponse.statusCode = 404;\n\t\tresponse.end();\n\t}\n\n\t/**\n\t* Sends a 503 response.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction unavailable( request, response ) {\n\t\tdebug( 'Sending 503 response...' );\n\t\tresponse.statusCode = 503;\n\t\tresponse.end();\n\t}\n\n\t/**\n\t* Sends HTML content in response to a client request.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction sendHTML( request, response ) {\n\t\tdebug( 'Sending HTML...' );\n\t\tresponse.statusCode = 200;\n\t\tresponse.setHeader( 'Content-Type', 'text/html' );\n\n\t\t// TODO: we have to convert to a `string` because Node v0.10 requires a `string`. Subsequent versions support providing a `Buffer` object. Ideally, we would sniff `Buffer` support and only convert to a `string` if necessary.\n\t\tresponse.setHeader( 'Content-Length', Buffer.byteLength( opts.html.toString() ) );\n\t\tresponse.end( opts.html );\n\t}\n\n\t/**\n\t* Sends JavaScript content in response to a client request.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction sendJavaScript( request, response ) {\n\t\tdebug( 'Sending JavaScript...' );\n\t\tresponse.statusCode = 200;\n\t\tresponse.setHeader( 'Content-Type', 'text/javascript' );\n\n\t\t// TODO: we have to convert to a `string` because Node v0.10 requires a `string`. Subsequent versions support providing a `Buffer` object. Ideally, we would sniff `Buffer` support and only convert to a `string` if necessary.\n\t\tresponse.setHeader( 'Content-Length', Buffer.byteLength( opts.javascript.toString() ) );\n\t\tresponse.end( opts.javascript );\n\t}\n\n\t/**\n\t* Callback invoked once the server should close.\n\t*\n\t* @private\n\t*/\n\tfunction onFinish() {\n\t\tdebug( 'Finished serving content.' );\n\t\tisClosing = true;\n\n\t\tdebug( 'Closing the server...' );\n\t\tserver.close();\n\n\t\tsetTimeout( destroyConnections, 5000 );\n\t}\n\n\t/**\n\t* Destroys all connections.\n\t*\n\t* @private\n\t*/\n\tfunction destroyConnections() {\n\t\tvar keys;\n\t\tvar i;\n\n\t\tdebug( 'Destroying all connections...' );\n\t\tkeys = objectKeys( connections );\n\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\tdebug( 'Destroying connection %s...', keys[i] );\n\t\t\tconnections[ keys[i] ].destroy();\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked once a server closes.\n\t*\n\t* @private\n\t*/\n\tfunction onClose() {\n\t\tdebug( 'Server closed.' );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a disposable HTTP server.\n*\n* @module @stdlib/net/disposable-http-server\n*\n* @example\n* var httpServer = require( '@stdlib/net/disposable-http-server' );\n*\n* var opts = {\n*     'html': '<h1>Beep</h1>'\n* };\n*\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - directory from which to serve files\n* @param {boolean} [options.open] - indicates whether to launch a web browser\n* @returns {(Error|null)} error or null\n*\n* @example\n* var options = {\n*     'port': 7331,\n*     'address': '127.0.0.1',\n*     'open': false\n* };\n* var opts = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'open' ) ) {\n\t\topts.open = options.open;\n\t\tif ( !isBoolean( opts.open ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'open', opts.open ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\n\n\n// MAIN //\n\n/**\n* Extracts HTTP server options from input function options.\n*\n* @private\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.port] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address] - server address\n* @returns {Options} server options\n*\n* @example\n* var options = {\n*     'open': true,\n*     'port': 7331,\n*     'address': '127.0.0.1'\n* };\n* var out = opts( options );\n* // returns {'port': 7331, 'address': '127.0.0.1'}\n*/\nfunction opts( options ) {\n\tvar out = {};\n\tif ( hasOwnProp( options, 'port' ) ) {\n\t\tout.port = options.port;\n\t}\n\tif ( hasOwnProp( options, 'maxport' ) ) {\n\t\tout.maxport = options.maxport;\n\t}\n\tif ( hasOwnProp( options, 'hostname' ) ) {\n\t\tout.hostname = options.hostname;\n\t}\n\tif ( hasOwnProp( options, 'address' ) ) {\n\t\tout.address = options.address;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = opts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar string2buffer = require( '@stdlib/buffer/from-string' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server:404' );\nvar message = string2buffer( 'File not found' );\n\n\n// MAIN //\n\n/**\n* Returns a `404` response.\n*\n* @private\n* @param {IncomingMessage} request - HTTP request object\n* @param {ServerResponse} response - HTTP response object\n*/\nfunction notFound( request, response ) {\n\tdebug( 'Sending 404 response...' );\n\tresponse.statusCode = 404;\n\tresponse.setHeader( 'Content-Type', 'text/plain' );\n\tresponse.setHeader( 'Content-Length', message.length );\n\tresponse.end( message );\n}\n\n\n// EXPORTS //\n\nmodule.exports = notFound;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar logger = require( 'debug' );\nvar readDir = require( '@stdlib/fs/read-dir' );\nvar notFound = require( './404.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server:request-listener' );\n\n\n// MAIN //\n\n/**\n* Returns a request listener for serving a directory.\n*\n* @private\n* @param {Options} opts - server options\n* @param {string} opts.dir - directory to serve\n* @returns {Function} request listener\n*/\nfunction requestListener( opts ) {\n\treturn onRequest;\n\n\t/**\n\t* Callback invoked upon receiving an HTTP request when serving a directory.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction onRequest( request, response ) {\n\t\tvar path;\n\n\t\tdebug( 'Received a request for %s', request.url );\n\n\t\t// Resolve the directory path, making sure to guard against attempts to access parent directories...\n\t\tpath = request.url.substring( 1 ); // remove leading `/`\n\t\tpath = resolve( opts.dir, path );\n\t\tif ( path.substring( opts.dir.length ) === '' ) {\n\t\t\tpath = opts.dir;\n\t\t}\n\t\tdebug( 'Request resolved to path %s', path );\n\t\tdebug( 'Reading directory' );\n\t\treadDir( path, onDir );\n\n\t\t/**\n\t\t* Callback invoked after reading a directory's contents.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {StringArray} contents - directory contents\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onDir( error, contents ) { // eslint-disable-line no-unused-vars\n\t\t\tif ( error ) {\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'ENOENT' ||\n\t\t\t\t\terror.code === 'ENOTDIR'\n\t\t\t\t) {\n\t\t\t\t\t// Return a `404` response...\n\t\t\t\t\treturn notFound( response );\n\t\t\t\t}\n\t\t\t\t// TODO\n\t\t\t}\n\t\t\t// TODO\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = requestListener;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar path = require( 'path' );\nvar logger = require( 'debug' );\nvar cwd = require( '@stdlib/process/cwd' );\nvar createServer = require( './../../http-server' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar openURL = require( '@stdlib/utils/open-url' );\nvar format = require( '@stdlib/string/format' );\nvar noop = require( '@stdlib/utils/noop' );\nvar validate = require( './validate.js' );\nvar serverOpts = require( './opts.js' );\nvar requestListener = require( './request_listener.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'simple-http-server' );\n\n\n// MAIN //\n\n/**\n* Creates a simple HTTP server. The implementation takes inspiration from Python's [SimpleHTTPServer][python-simplehttpserver].\n*\n* [python-simplehttpserver]: https://docs.python.org/2/library/simplehttpserver.html\n*\n* @param {Options} [options] - server options\n* @param {string} [options.dir] - directory from which to serve files\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"0.0.0.0\"] - server address\n* @param {boolean} [options.open=false] - indicates whether to launch a web browser\n* @param {Callback} [clbk] - callback to invoke upon creating a server\n* @throws {TypeError} must provide valid options\n* @throws {Error} error encountered when starting server\n*\n* @example\n* var opts = {\n*     'dir': './',\n*     'port': 7331,\n*     'hostname': 'localhost',\n*     'open': false\n* };\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\nfunction httpServer() {\n\tvar options;\n\tvar server;\n\tvar sopts;\n\tvar clbk;\n\tvar boot;\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length === 1 ) {\n\t\tif ( isFunction( arguments[0] ) ) {\n\t\t\tclbk = arguments[ 0 ];\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\terr = validate( opts, options );\n\t\t}\n\t} else if ( arguments.length > 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\terr = validate( opts, options );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( clbk === void 0 ) {\n\t\tclbk = noop;\n\t}\n\tif ( opts.dir ) {\n\t\topts.dir = path.resolve( cwd(), opts.dir );\n\t}\n\tdebug( 'Serving directory: %s', opts.dir );\n\n\t// Extract server options...\n\tif ( options ) {\n\t\tsopts = serverOpts( options );\n\t} else {\n\t\tsopts = {};\n\t}\n\t// Create a function to boot a server...\n\tboot = createServer( sopts, requestListener( opts ) );\n\n\tdebug( 'Starting server...' );\n\tboot( onServer );\n\n\t/**\n\t* Callback invoked upon creating a server.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {Server} _server - server instance\n\t* @throws {Error} error encountered when starting server\n\t*/\n\tfunction onServer( error, _server ) {\n\t\tvar addr;\n\t\tif ( error ) {\n\t\t\tthrow error;\n\t\t}\n\t\tdebug( 'Server started.' );\n\t\tserver = _server;\n\t\tserver.once( 'close', onClose );\n\t\tif ( opts.open ) {\n\t\t\taddr = server.address();\n\t\t\topenURL( 'http://'+addr.address+':'+addr.port );\n\t\t}\n\t\tclbk( null, server );\n\t}\n\n\t/**\n\t* Callback invoked once a server closes.\n\t*\n\t* @private\n\t*/\n\tfunction onClose() {\n\t\tdebug( 'Server closed.' );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a simple HTTP server.\n*\n* @module @stdlib/net/simple-http-server\n*\n* @example\n* var httpServer = require( '@stdlib/net/simple-http-server' );\n*\n* var opts = {\n*     'dir': './',\n*     'port': 7331,\n*     'hostname': 'localhost',\n*     'open': false\n* };\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace net\n*/\nvar net = {};\n\n/**\n* @name tempHttpServer\n* @memberof net\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/net/disposable-http-server}\n*/\nimport tempHttpServer from './../disposable-http-server';\nsetReadOnly( net, 'tempHttpServer', tempHttpServer );\n\n/**\n* @name httpServer\n* @memberof net\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/net/http-server}\n*/\nimport httpServer from './../http-server';\nsetReadOnly( net, 'httpServer', httpServer );\n\n/**\n* @name simpleHttpServer\n* @memberof net\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/net/simple-http-server}\n*/\nimport simpleHttpServer from './../simple-http-server';\nsetReadOnly( net, 'simpleHttpServer', simpleHttpServer );\n\n\n// EXPORTS //\n\nexport default net;\n"],"names":["isNonNegativeInteger","require$$0","isPrimitive","isString","require$$1","isObject","require$$2","hasOwnProp","require$$3","format","require$$4","validate_1","opts","options","port","TypeError","maxport","hostname","address","http","isFunction","validate","DEFAULTS","debug","main","requestListener","nargs","max","err","arguments","length","createServer","done","server","on","error","code","listen","once","addr","lib","isBuffer","isBoolean","require$$5","html","javascript","open","opts_1","out","connections_store","__dirname","path","logger","objectKeys","readFileSync","sync","require$$6","openURL","require$$7","noop","require$$8","Buffer","require$$9","string2buffer","require$$10","nextTick","require$$11","require$$12","require$$13","serverOpts","require$$14","createStore","require$$15","module","exports","connections","isClosing","sopts","fpath","clbk","boot","onServer","_server","onConnection","onClose","socket","key","remoteAddress","remotePort","request","response","url","unavailable","onTick","sendJavaScript","onFinish","notFound","fcn","sendHTML","statusCode","end","setHeader","byteLength","toString","close","setTimeout","destroyConnections","keys","i","destroy","resolve","dir","message","_404","readDir","request_listener","substring","contents","cwd","net","setReadOnly","tempHttpServer","httpServer","simpleHttpServer"],"mappings":"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"}